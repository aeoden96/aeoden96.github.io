---
import FormattedDate from "./FormattedDate.astro";

export interface Props {
  url: string;
  title: string;
  pubDate: Date;
  description?: string;
  tags?: string[];
  isFeature?: boolean;
  heroImage?: string;
  actionText?: string;
  tagColorClass?: string;
}

const { 
  url, 
  title, 
  pubDate, 
  description, 
  tags, 
  isFeature = false, 
  heroImage,
  actionText,
  tagColorClass = "bg-indigo-50 text-indigo-700"
} = Astro.props;

function generateGradientColors(seed: string): string[] {
  // Simple hash function to convert string to number
  const hashString = (str: string): number => {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      hash = ((hash << 5) - hash) + str.charCodeAt(i);
      hash |= 0; // Convert to 32bit integer
    }
    return Math.abs(hash);
  };

  // Generate colors from seed
  const hash = hashString(seed);
  const h1 = hash % 360;
  const h2 = (h1 + 40 + (hash % 80)) % 360;
  const s = 65 + (hash % 20);
  const l = 55 + (hash % 20);

  return [
    `hsl(${h1}, ${s}%, ${l}%)`,
    `hsl(${h2}, ${s}%, ${l}%)`
  ];
}

const gradientColors = generateGradientColors(title);
---
<a
  href={url}
  class={`block bg-white dark:bg-gray-800 rounded-lg overflow-hidden ring-2 ring-transparent  hover:ring-gray-400 dark:hover:ring-gray-200 transition-shadow duration-300 ${isFeature ? "md:col-span-2" : ""}`}
>
  <div class="relative">
    {heroImage ? (
      <div>
        <img
          src={heroImage}
          alt=""
          class={`w-full h-auto object-cover ${isFeature ? "md:h-80" : "h-60"}`}
        />
        <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 hover:opacity-100 transition-opacity duration-300" />
      </div>
    ) : (
      <div
        style={`background: linear-gradient(135deg, ${gradientColors.join(', ')});`}
        aria-hidden="true"
        role="presentation"
        class="w-full object-cover h-10"
      />
    )}
  </div>
  <div class="p-6">
    <h2
      class=" text-gray-800 text-lg  dark:text-gray-100 mb-2"
    >
      {title}
    </h2>
    <p class="text-gray-500 dark:text-gray-400 mb-4">
      <FormattedDate date={pubDate} />
    </p>
    {description && (
      <p class="text-gray-600 text-md text-ellipsis  dark:text-gray-400">
        {description}
      </p>
    )}
    {tags && tags.length > 0 && (
      <div class="mt-2 flex flex-wrap gap-2">
        {tags.map((tag) => (
          <span class={`px-2 py-1 text-xs font-medium ${tagColorClass} rounded-full`}>
            {tag}
          </span>
        ))}
      </div>
    )}
    {actionText && (
      <div class="mt-4 inline-flex items-center text-sm font-medium text-indigo-600 hover:text-indigo-500 dark:text-indigo-400 dark:hover:text-indigo-300">
        {actionText}
        <svg
          class="ml-1 w-4 h-4"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 20 20"
          fill="currentColor"
          aria-hidden="true"
        >
          <path
            fill-rule="evenodd"
            d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z"
            clip-rule="evenodd"
          />
        </svg>
      </div>
    )}
  </div>
</a> 