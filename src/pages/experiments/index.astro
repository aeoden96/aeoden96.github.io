---
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import { getCollection } from "astro:content";
import FormattedDate from "../../components/FormattedDate.astro";

const experiments = (await getCollection("experiments")).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
  </head>
  <body class="bg-gradient-to-b from-gray-50 to-gray-100 min-h-screen">
    <Header />
    <main class="max-w-4xl mx-auto px-4 py-8">
      <h1 class="text-3xl font-bold text-center mb-10 text-gray-800">
        Experiments
      </h1>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
        {
          experiments.map((experiment, index) => (
            <a
              href={`/experiments/${experiment.id}/`}
              class={`block bg-white rounded-lg overflow-hidden shadow-md hover:shadow-xl transition-shadow duration-300 ${index === 0 ? "md:col-span-2" : ""}`}
            >
              <div class="relative">
                <img
                  src={experiment.data.heroImage}
                  alt=""
                  class={`w-full h-auto object-cover ${index === 0 ? "md:h-80" : "h-60"}`}
                />
                <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 hover:opacity-100 transition-opacity duration-300" />
              </div>
              <div class="p-6">
                <h2
                  class={`font-bold text-gray-800 mb-2 ${index === 0 ? "text-2xl md:text-3xl" : "text-xl"}`}
                >
                  {experiment.data.title}
                </h2>
                <p class="text-gray-500 mb-4">
                  <FormattedDate date={experiment.data.pubDate} />
                </p>
                {experiment.data.description && (
                  <p class="text-gray-600 overflow-hidden text-ellipsis max-h-12">
                    {experiment.data.description}
                  </p>
                )}
                {experiment.data.tags && experiment.data.tags.length > 0 && (
                  <div class="mt-2 flex flex-wrap gap-2">
                    {experiment.data.tags.map((tag) => (
                      <span class="px-2 py-1 text-xs font-medium bg-purple-50 text-purple-700 rounded-full">
                        {tag}
                      </span>
                    ))}
                  </div>
                )}
                <div class="mt-4 inline-flex items-center text-sm font-medium text-purple-600 hover:text-purple-500">
                  View experiment
                  <svg
                    class="ml-1 w-4 h-4"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                    aria-hidden="true"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z"
                      clip-rule="evenodd"
                    />
                  </svg>
                </div>
              </div>
            </a>
          ))
        }
      </div>
    </main>
    <Footer />
  </body>
</html>

